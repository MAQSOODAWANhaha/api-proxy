# AI代理平台后端 Dockerfile
# 多阶段构建：构建阶段 + 运行阶段

# ================================
# 构建阶段
# ================================
FROM docker.m.daocloud.io/rust:1.88.0-slim as builder


# 配置 Cargo 中国镜像源 (关键修复)
RUN mkdir -p $CARGO_HOME && \
    echo '[source.crates-io]' > $CARGO_HOME/config.toml && \
    echo 'replace-with = "ustc"' >> $CARGO_HOME/config.toml && \
    echo '' >> $CARGO_HOME/config.toml && \
    echo '[source.ustc]' >> $CARGO_HOME/config.toml && \
    echo 'registry = "sparse+https://mirrors.ustc.edu.cn/crates.io-index/"' >> $CARGO_HOME/config.toml && \
    echo '' >> $CARGO_HOME/config.toml && \
    echo '[net]' >> $CARGO_HOME/config.toml && \
    echo 'git-fetch-with-cli = true' >> $CARGO_HOME/config.toml

# 或者使用以下环境变量方式 (推荐)
ENV CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
ENV CARGO_REGISTRIES_CRATES_IO_INDEX=https://mirrors.ustc.edu.cn/crates.io-index/

# 设置工作目录
WORKDIR /app

# 安装必要的系统依赖
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libsqlite3-dev \
    cmake \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# 复制Cargo配置文件（从根目录开始）
COPY Cargo.toml Cargo.lock ./
COPY entity/Cargo.toml ./entity/
COPY migration/Cargo.toml ./migration/

# 复制源代码
COPY src ./src/
COPY entity/src ./entity/src/
COPY migration/src ./migration/src/

# 构建项目（发布模式）
RUN cargo build --release

# ================================
# 运行阶段
# ================================
FROM docker.m.daocloud.io/debian:bookworm-slim

# 配置中国镜像源
RUN sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list.d/debian.sources && \
    sed -i 's/security.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list.d/debian.sources

# 安装运行时依赖
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libsqlite3-0 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 创建应用用户
RUN useradd -r -s /bin/false -m -d /app apiproxy

# 设置工作目录
WORKDIR /app

# 从构建阶段复制二进制文件
COPY --from=builder /app/target/release/api-proxy /app/api-proxy

# 创建必要的目录
RUN mkdir -p /app/data /app/certs /app/logs /app/config

# 复制配置文件（从根目录开始）
COPY config/ ./config/
COPY config.toml ./

# 设置权限
RUN chown -R apiproxy:apiproxy /app
RUN chmod +x /app/api-proxy

# 切换到非root用户
USER apiproxy

# 暴露端口
# 8080: Pingora代理服务
# 9090: Axum管理API
EXPOSE 8080 9090

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:9090/api/health || exit 1

# 设置环境变量
ENV RUST_LOG=info
ENV RUST_BACKTRACE=1
ENV API_PROXY_CONFIG_PATH=/app/config.toml
ENV API_PROXY_DATA_DIR=/app/data

# 启动命令
CMD ["./api-proxy"]